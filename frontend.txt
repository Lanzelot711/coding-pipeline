To implement the necessary frontend components for a Todo app/Task tracker with the described functionality, we will use the latest version of React that supports hooks and function components. Below is the architectural plan for the React frontend:

1. **Setup project structure:**
   - Create a new React project using `create-react-app` or similar tooling.
   - Organize your project with the following folder structure:
     ```
     /nestproject
       /src
         /components
         /services
         /hooks
         /utils
         /pages
       /public
     ```

2. **Create utility functions for API calls:**
   - File path: `/src/utils/api.js`
   - Functions:
     - `fetchTasks`: GET all entries
       - Input: none
       - Output: List of tasks
       - Imports: Axios or fetch API for making HTTP requests
     - `deleteTask`: DELETE entry by id
       - Input: taskId
       - Output: Confirmation of deletion
     - `fetchTaskById`: GET entry by id
       - Input: taskId
       - Output: Single task detail
     - `addTask`: POST new task entry
       - Input: Task object with `name` and `deadline`
       - Output: Newly created task

3. **Create custom hooks for data fetching:**
   - File path: `/src/hooks/useTasks.js`
   - Hook: `useTasks`
     - Purpose: To fetch tasks from the backend and provide add, delete, and get functionality

4. **Create the main components:**
   - TaskList Component:
     - File path: `/src/components/TaskList.js`
     - Function: Renders a list of tasks
     - Imports: `useTasks` hook, TaskItem component

   - TaskItem Component:
     - File path: `/src/components/TaskItem.js`
     - Function: Renders individual task details with an option to delete
     - Imports: `useTasks` hook

   - AddTaskForm Component:
     - File path: `/src/components/AddTaskForm.js`
     - Function: Provides a form to enter task name and deadline, then submits new task
     - Inputs: Task name, Task deadline

   - Layout Component (optional for UI structure):
     - File path: `/src/components/Layout.js`
     - Function: Defines the page layout where other components are rendered

5. **Create the main page:**
   - File path: `/src/pages/TodoPage.js`
   - Function: Combines TaskList and AddTaskForm components
   - Imports: TaskList, AddTaskForm, Layout components

6. **Create the App entry point:**
   - File path: `/src/App.js`
   - Function: Mounts the main TodoPage and any routing if necessary
   
7. **Set up routing (if required):**
   - If the application is a single-page app, you may not need a router.
   - If multiple pages are required, use React Router.
   - File path: `/src/App.js` (or create a separate `/src/routes.js` file)
   - Imports: BrowserRouter and Route from 'react-router-dom', TodoPage component

8. **Add Global State Management (if necessary):**
   - For larger applications or for those needing more complex state handling, consider using Context API or Redux for state management.

Each of the above components, hooks, and services would need to handle the edge cases such as error handling, loading states, and updating the UI reactively. Depending on the user requirement for the backend server URL, you may also need to set up environment variables to store the API endpoints.

Please remember that this is a high-level plan, in an actual implementation, you would need to refine each component, hooks, and service, fleshing out the specifics such as parameters, structure of the task objects, error handling, form validation, and adding style/CSS for UI components.